"""
Django settings for DjangoHuenni_Blog project.

Generated by 'django-admin startproject' using Django 5.0.7.

For more information on this file, see
https://docs.djangoproject.com/en/5.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.0/ref/settings/
"""

from pathlib import Path
import os

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-$f3501g-xu2l!6bojinjlk%7o$cmvisfk==!0=h$*g$6s&ldf%'

# ### AH
# Links: https://docs.djangoproject.com/en/5.0/ref/settings/#debug
# Diese Konfiguration muss für die Praxis entsprechend geändert werden
# ###
# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

# ### AH 
# Links: https://docs.djangoproject.com/en/5.0/ref/settings/#allowed-hosts
# Diese Konfiguration muss für die Praxis entsprechend geändert werden
# ###
ALLOWED_HOSTS = ["*"]


# Application definition

INSTALLED_APPS = [
    # ### AH Standard Django Frameworks
    'django.contrib.admin',        # Admin-Webseite /admin
    'django.contrib.auth',         # Authentifizeirungssystem
    'django.contrib.contenttypes', # Framework für Inhaltstypen
    'django.contrib.sessions',     # Sessionverwaltung
    'django.contrib.messages',     # Framework für Messaging
    'django.contrib.staticfiles',  # Framework zum Verwalten statischer Dateien (siehe auch weiter unten)

    # ### AH Selbstentwickelten Apps ...
    'huenni_blog.apps.HuenniBlogConfig',

    # ### importierte Django- / Drittanbieter Frameworks
    "crispy_bootstrap5",           # Framework um HTML Dateien zu designen (Desktop, Mobile, ... )
    "crispy_forms",                # Framework zur Verwaltung von Formularen zur Eingabe der Daten 

]

CRISPY_ALLOWED_TEMPLATE_PACKS = "bootstrap5"
CRISPY_TEMPLATE_PACK = "bootstrap5"



MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'DjangoHuenni_Blog.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates'], 
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                # ### AH
                # eigene Hilfsfunktionen z. B. die Daten in die 
                # index.html einlesen und ausgeben
                # ###
                'huenni_blog.huenni_utility.blog_cats1',
                'huenni_blog.huenni_utility.blog_posts',
                'huenni_blog.huenni_utility.blog_rubric',
                'huenni_blog.huenni_utility.spruch_post',
            ],
        },
    },
]

WSGI_APPLICATION = 'DjangoHuenni_Blog.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.0/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        
        'NAME': 'itlg_huenni_blog',
        'USER': 'admin-huenni-blog',  
        'PASSWORD': 'Tester12345#', 
         
        # 'HOST': '85.215.58.208',  
        'HOST': 'netzsprung.de',  
        'PORT': '3306',  

    }
}


# Password validation
# https://docs.djangoproject.com/en/5.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.0/topics/i18n/

LANGUAGE_CODE = 'en-us'

# ### AH
# Hier werden die Zeitzone /Timezone konfiguriert
# Siehe Links:
#   https://en.wikipedia.org/wiki/List_of_tz_database_time_zones
#   https://docs.djangoproject.com/en/5.0/ref/settings/#std-setting-TIME_ZONE
# ###
TIME_ZONE = 'Europe/Berlin'
USE_I18N = True
USE_TZ = True


# ### AH
# Konfiguration der statischen Dateien
# Siehe Links:
#   https://docs.djangoproject.com/en/5.0/ref/settings/#static-files
#   https://docs.djangoproject.com/en/5.0/howto/static-files/
#   https://docs.djangoproject.com/en/5.0/howto/static-files/deployment/
# ###
STATIC_URL = 'static/'
STATICFILES_DIRS = [
    BASE_DIR / "static" # AH: Pfad definieren wo static Dateien wie z. B. Bilder, css zu finden sind
]

# ### AH
# sagt aus wo die Bilder zu den Artikeln geladen werden sollen
# muss auch in der urls.py definiert werden
# ### 
MEDIA_URL = '/media/'
#MEDIA_URL = "/bilder/"
print(MEDIA_URL)

# ### AH
# sagt aus wo die Bilder zu den Artikeln beim ändern im ADMIN Panel hingespreichert werden sollen
# ### 
#MEDIA_ROOT =  os.path.join(BASE_DIR, 'media')
MEDIA_ROOT = BASE_DIR / "media/"
print(MEDIA_ROOT)



# Default primary key field type
# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# +++ AH
#  Das LOGGING dictionary
# Links: 
#   https://docs.djangoproject.com/en/5.0/howto/logging/
#   https://www.crowdstrike.com/guides/python-logging/logging-with-django/
# ###
LOGGING = {
    # Use v1 of the logging config schema
    'version': 1,
    # Continue to use existing loggers
    'disable_existing_loggers': False,
    # Create a log handler that prints logs to the terminal
    'handlers': {
        'console': {
            'class': 'logging.StreamHandler',
        },
        "file": {
            "class": "logging.FileHandler",
            "filename": "general.log",
            "level": "DEBUG",
        },
    },
    # Define the root logger's settings
    'root': {
        'handlers': ['console', 'file'],
        'level': 'DEBUG',
    },
    # Define the django log module's settings
    'loggers': {
        'django': {
            'handlers': ['file'],
            # 'handlers': ['console', 'file'],
            'level': os.getenv('DJANGO_LOG_LEVEL', 'DEBUG'),
            'propagate': False,
        },
    },
    "formatters": {
        "verbose": {
            "format": "{name} {levelname} {asctime} {module} {process:d} {thread:d} {message}",
            "style": "{",
        },
        "simple": {
            "format": "{levelname} {message}",
            "style": "{",
        },
    },    
}

# ++++++ AH
# ENDE ENDE ENDE ENDE END END END END 
# ++++++


